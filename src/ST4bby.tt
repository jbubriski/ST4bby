<#@ Include File="ST4bby.Config.ttinclude" #>
<#@ Assembly Name="System.Xml" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ Assembly Name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ Assembly Name="Microsoft.SqlServer.Smo" #>
<#@ Assembly Name="System.Data" #>
<#@ Assembly Name="EnvDTE" #>
<#@ Import Namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ Import Namespace="System.Xml.Serialization" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Data.Common" #>
<#@ Import Namespace="System.Text.RegularExpressions" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="Microsoft.SqlServer.Management.Common" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="EnvDTE" #>
<#
  if (ConfigIsValid())
    {
      var connectionString = GetConnectionString();
        using(SqlConnection conn = new SqlConnection(connectionString))
        {
            var serverConnection = new ServerConnection(conn);
            var tables = new Server(serverConnection).Databases[databaseName].Tables;

            foreach (Table table in tables)
            {
                if ( IsClassOkToGenerate( table ) )
                {
                    OutputClass(nameSpaceName, table);
                    var path = SaveOutput(table.Name + ".cs");
                    // total hack but it adds the newly written file into the current visual studio instance
                    var project = GetCurrentProject();

                    project.ProjectItems.AddFromFile(path);
                }
            }
        }
    }
#>
<#+
	
    private readonly static Dictionary<string, string> TypeMappings = new Dictionary<string, string> 
    {
        { "bit","bool" },           { "uniqueidentifier","Guid" },
        { "datetime","DateTime" },  { "datetime2","DateTime" },
        { "int","int" },            { "smallint","short" },
        { "bigint","long" },        { "varchar","string" },
        { "nchar","char" },         { "char","char" },
        { "nvarchar","string" },    { "text","string" },
        { "ntext","string" }
    };
	
    public EnvDTE.Project GetCurrentProject()
    {
        var serviceProvider             = (IServiceProvider)Host;
        var dte                         = (EnvDTE.DTE)serviceProvider.GetService(typeof(EnvDTE.DTE));
        var currentSlnProjects          = (Array)dte.ActiveSolutionProjects;

        return (EnvDTE.Project)currentSlnProjects.GetValue(0);
    }
	
	/// <summary> This method creates the signature for the class.
    /// E.g.: public partial class Customer()
    /// </summary>
    /// <param name="table"></param>
    /// <param name="usePartialClass"></param>
    /// <returns></returns>
	private static string CreateClassSignature( Table table, bool usePartialClass )
	{
		var ret = "public";
		if( usePartialClass )
		{
			ret += " partial";
		}
		ret += " class " + table.Name;
		if( false == string.IsNullOrWhiteSpace( ClassInheritFrom ) )
		{
			ret += " : " + ClassInheritFrom;
		}
		return ret;
	}
	
	/// <summary> This method creates the namespace signature.
	/// </summary>
	/// <param name="namespaceName"></param>
	/// <param name="table"></param>
	/// <param name="useSchemaForNamespace"></param>
	/// <returns></returns>
	private static string CreateNamespaceSignature( string namespaceName, Table table, bool useSchemaForNamespace )
	{
		string ret = string.Format( "namespace {0}", namespaceName );
		if( useSchemaForNamespace )
		{
			ret += "." + table.Schema;
		}
		return ret;
	}
	
    /// <summary> This method creates a parameter for a method from a column.
    /// E.g.: "int CustomerID" or "string Name".
    /// </summary>
    /// <param name="column"></param>
    /// <returns></returns>
	private static string CreateMethodParameter( Column column )
	{
        var isNullable       = column.Nullable;
        var type             = TypeMappings.ContainsKey(column.DataType.Name) ? TypeMappings[column.DataType.Name] : "string";
        var typeFormat       = type != "string" && isNullable ? "Nullable<{0}>" : "{0}";

        return String.Format("{0} {1}", String.Format(typeFormat,type), column.Name);
	}

    /// <summary> This method creates a method signature.
    /// E.g.: "private void Set( CustomerID, Name )".
    /// </summary>
    /// <param name="scope">public, internal or private.  Should this be an enum?</param>
    /// <param name="isStatic"></param>
    /// <param name="returnType"></param>
    /// <param name="methodName"></param>
    /// <param name="columns"></param>
    /// <param name="includePrimaryKey">Whether the primary key should be included or not.
    /// New objects often can't have the PK set at the client, only in the database.</param>
    /// <returns></returns>
	private static string CreateMethodSignature( string scope, bool isStatic, string returnType, string methodName, ColumnCollection columns, bool includePrimaryKey = true )
	{
		// Create a list of the method's parameters.
		var paramList = new List<string>();
		if( columns != null )
		{
			foreach( Column column in columns )
			{
				if( ! column.InPrimaryKey || includePrimaryKey )
				{
					paramList.Add( CreateMethodParameter( column ) );
				}
			}
		}
		
		return string.Format(
			"{0}{1}{2} {3}( {4} )", 
			scope, 
			isStatic ? " static" : null, 
			false == string.IsNullOrWhiteSpace( returnType ) ? " " + returnType : null, 
			methodName, 
			string.Join( ", ", paramList.ToArray() )
			);
	}

    /// <summary> This method creates all parameters for a constructor.
    /// It is not necessarily only for constructor use.  A method like "Set( CustomerID, Name, ...)"
    /// could use it too.  Rename it when need arises.
    /// </summary>
    /// <param name="columns"></param>
    /// <param name="includePrimaryKey"></param>
    /// <returns></returns>
	private static string CreateNamedArgumentListForConstructor( ColumnCollection columns, bool includePrimaryKey = true )
	{
		var assignmentList = new List<string>();
		foreach( Column column in columns )
		{
			if( ! column.InPrimaryKey || includePrimaryKey )
			{
				assignmentList.Add( column.Name + " = " + column.Name );
			}	
		}
		return string.Join( "," + Environment.NewLine, assignmentList.ToArray() );
	}
	
    /// <summary> This method returns true if the table is among the ones that should generate code.
    /// Typically aren't system objects and explicitly excluded tables among those.
    /// </summary>
    /// <param name="table">The table in question.</param>
    /// <returns></returns>
    private bool IsClassOkToGenerate( Table table )
    {
        if( false == string.IsNullOrWhiteSpace( ExcludeTablesRegex ) &&
            ( table.IsSystemObject || Regex.IsMatch( table.Name, ExcludeTablesRegex ) ) )
        {
            return false;
        }else{
            return true;
        }
    }

	private string OutputProperty(Column column)
    {
        var isNullable       = column.Nullable;
        var type             = TypeMappings.ContainsKey(column.DataType.Name) ? TypeMappings[column.DataType.Name] : "string";
        var typeFormat       = type != "string" && isNullable ? "Nullable<{0}>" : "{0}";

        var annotations      = GetAnnotations(column);

        return String.Format("{0}public {1} {2} {{ get; set; }}", annotations, String.Format(typeFormat,type), column.Name);
    }

    string GetAnnotations(Column col)
    {
      var builder = new List<string>();
        var canHaveLength = new string[] { "nvarchar", "varchar", "char", "nchar" };
        if (canHaveLength.Contains(col.DataType.Name) && col.DataType.MaximumLength > -1)
            builder.Add( String.Format("StringLength({0})", col.DataType.MaximumLength));

        if (!col.Nullable)
            builder.Add("Required");

        if (col.InPrimaryKey)
          builder.Add("Key");

        var notations = String.Join(", ", builder);
      return builder.Count > 0 ? String.Format("[{0}]{1}", notations, System.Environment.NewLine) : String.Empty;
  }

    System.Collections.Generic.IEnumerable<string> GatherProperties(ColumnCollection columns)
    {
        foreach (Column col in columns)
            yield return OutputProperty(col);
    }

    void Out(string stuff)
    {
#><#= stuff + System.Environment.NewLine #><#+
    }

    void Out(string stuff, params object[] args)
    {
#><#= String.Format(stuff, args) + System.Environment.NewLine #><#+
    }

    string SaveOutput(string outputFileName)
    {
      var content = this.GenerationEnvironment.ToString();
      string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
      string outputFilePath = Path.Combine(templateDirectory, outputFileName);

        File.WriteAllText(outputFilePath, content);

      this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);

        return outputFilePath;
    }

    void OutputClass(string namespaceName, Table table)
    {
		Out("// This class is automatically generated by ST4bby {0}.", System.DateTime.Now.ToString());
		Out("// Read more at https://github.com/jbubriski/ST4bby/");
		Out("");
		Out( CreateNamespaceSignature( namespaceName, table, UseSchemaForNamespace ) );
		Out("{");
		PushIndent("\t");
			Out("using System;");
			Out("using System.ComponentModel.DataAnnotations;");
			Out( "" );
			Out( CreateClassSignature( table, UsePartialClass ) );
			Out("{");
			PushIndent("\t");
				//	Properties.
				var properties = GatherProperties(table.Columns);
				Out(String.Join(System.Environment.NewLine, properties));
		
				//	Static constructors.
				if( false == string.IsNullOrWhiteSpace( NameOfStaticConstructor ) )
				{
					Out("");
			        Out( "/// <summary> This static constructor takes all fields but the primary key." );
			        Out( "/// </summary>");
			        Out( "/// <returns></returns>");
					Out( CreateMethodSignature( "public", true, table.Name, NameOfStaticConstructor, table.Columns, includePrimaryKey : false ) );
					Out("{");
					PushIndent("\t");
						Out( "return new " + table.Name + "()" );
						Out( "{" );
						PushIndent("\t");
							Out( CreateNamedArgumentListForConstructor( table.Columns, includePrimaryKey : false ) );
						PopIndent();
						Out( "};" );
					PopIndent();
					Out("}");
					Out("");
			        Out( "/// <summary> This static constructor takes all fields including the primary key." );
			        Out( "/// </summary>");
			        Out( "/// <returns></returns>");
					Out( CreateMethodSignature( "public", true, table.Name, NameOfStaticConstructor, table.Columns ) );
					Out("{");
					PushIndent("\t");
						Out( "return new " + table.Name + "()" );
						Out( "{" );
						PushIndent("\t");
							Out( CreateNamedArgumentListForConstructor( table.Columns, includePrimaryKey : true ) );
						PopIndent();
						Out( "};" );
					PopIndent();
					Out("}");
				}
			PopIndent();
			Out("}");
		PopIndent();
		Out("}");
    }
#>
