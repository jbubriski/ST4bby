<#@ Include File="SaveOutput.tt" #>
<#@ Assembly Name="System.Xml" #>
<#@ Assembly Name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ Assembly Name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ Assembly Name="Microsoft.SqlServer.Smo" #>
<#@ Import Namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ Import Namespace="System.Xml.Serialization" #>
<#
    var namespaceName = @"";
    var serverName = @"";
    var databaseName = @"";

    if(!string.IsNullOrWhiteSpace(namespaceName)
        && !string.IsNullOrWhiteSpace(serverName)
        && !string.IsNullOrWhiteSpace(databaseName))
    {
        var server = new Server(serverName);
        var database = server.Databases[databaseName];

        foreach (Table table in database.Tables)
        {
            if (!table.IsSystemObject)
            {
                OutputClass(namespaceName, table);
                SaveOutput(table.Name + ".cs");
            }
        }
    }
#>
<#+
    string OutputProperty(Column column)
    {
        var typeMappings = new System.Collections.Generic.Dictionary<string, string> {
            { "bit","bool" }, { "uniqueidentifier","Guid" },
            { "datetime","DateTime" }, { "datetime2","DateTime" },
            { "int","int" }, { "smallint","short" },
            { "bigint","long" }, { "varchar","string" },
            { "nvarchar","string" }, { "text","string" },
            { "ntext","string" }
        };
        var sqlDataType      = column.DataType.Name;
        var isNullable       = column.Nullable;
        var isPrimaryKey     = column.InPrimaryKey;
        var type             = typeMappings.ContainsKey(sqlDataType) ? typeMappings[sqlDataType] : "string";
        var typeFormat       = type != "string" && isNullable ? "Nullable<{0}>" : "{0}";

        return String.Format("{0}public {1} {2} {{ get; set; }}",
            isPrimaryKey ? "[Key]\r\n\t" : "\t",
            String.Format(typeFormat,type),
            column.Name);
    }

    System.Collections.Generic.IEnumerable<string> GatherProperties(ColumnCollection columns)
    {
        foreach (Column col in columns)
        {
            yield return OutputProperty(col);
        }
    }

    void Out(string stuff)
    {
#><#= stuff #><#+
    }

    void Out(string stuff, params object[] args)
    {
#><#= String.Format(stuff,args) #><#+
    }

    void OutputClass(string namespaceName, Table table)
    {
    	Out("namespace {0}.{1}", namespaceName, table.Schema);
    	Out("{");
    	PushIndent("\t");
    		Out("using System;");
    		Out("using System.ComponentModel.DataAnnotations;");
    		Out("public class {0}", table.Name);
    		Out("{");
    		PushIndent("\t");
    			var properties = GatherProperties(table.Columns);
    			Out(String.Join(System.Environment.NewLine, properties));
    		PopIndent();
    		Out("}");
    	PopIndent();
    	Out("}");
    }
#>
